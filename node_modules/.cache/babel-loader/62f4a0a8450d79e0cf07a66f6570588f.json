{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\User\\\\Desktop\\\\My-CV\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\My-CV\\\\src\\\\components\\\\animated\\\\animated-progress-bar.jsx\";\nimport './animated-progress-bar.scss';\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'rc-progress';\nimport { useGlobalState } from '../../global-state-provider';\nimport { increaseNumber } from '../../utils/func-utils';\nconst NUMBER_TO_INCREMENT_WITH = 1;\nconst TIMEOUT_IN_MS = 75;\nconst MAX_NUMBER_TO_INCREMENT_TO = 100;\n\nconst AnimatedProgressBar = () => {\n  const _useGlobalState = useGlobalState(),\n        setIsPageLoading = _useGlobalState.setIsPageLoading;\n\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        percent = _useState2[0],\n        setPercent = _useState2[1];\n\n  useEffect(() => {\n    increaseNumber(percent, NUMBER_TO_INCREMENT_WITH, setPercent, TIMEOUT_IN_MS, MAX_NUMBER_TO_INCREMENT_TO);\n\n    if (percent === MAX_NUMBER_TO_INCREMENT_TO) {\n      setIsPageLoading(false);\n    }\n  }, [percent]);\n  return React.createElement(\"section\", {\n    className: \"animated-progress-bar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(\"article\", {\n    className: \"animated-progress-bar-content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"animated-progress-bar-turn-code-into-coffee\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"Turning coffee into code.\"), React.createElement(\"p\", {\n    className: \"animated-progress-bar-turn-code-into-coffee-percentage\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"\".concat(percent, \"%\"))), React.createElement(Line, {\n    strokeColor: \"#19f6e8\",\n    strokeWidth: \"1\",\n    percent: percent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }));\n};\n\nexport default AnimatedProgressBar;","map":{"version":3,"sources":["C:\\Users\\User\\Desktop\\My-CV\\src\\components\\animated\\animated-progress-bar.jsx"],"names":["React","useEffect","useState","Line","useGlobalState","increaseNumber","NUMBER_TO_INCREMENT_WITH","TIMEOUT_IN_MS","MAX_NUMBER_TO_INCREMENT_TO","AnimatedProgressBar","setIsPageLoading","percent","setPercent"],"mappings":";;AAAA,OAAO,8BAAP;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,aAArB;AACA,SAASC,cAAT,QAA+B,6BAA/B;AACA,SAASC,cAAT,QAA+B,wBAA/B;AAEA,MAAMC,wBAAwB,GAAG,CAAjC;AACA,MAAMC,aAAa,GAAG,EAAtB;AACA,MAAMC,0BAA0B,GAAG,GAAnC;;AAEA,MAAMC,mBAAmB,GAAG,MAAM;AAAA,0BACDL,cAAc,EADb;AAAA,QACtBM,gBADsB,mBACtBA,gBADsB;;AAAA,oBAEER,QAAQ,CAAC,CAAD,CAFV;AAAA;AAAA,QAEtBS,OAFsB;AAAA,QAEbC,UAFa;;AAI9BX,EAAAA,SAAS,CAAC,MAAM;AACZI,IAAAA,cAAc,CAACM,OAAD,EAAUL,wBAAV,EAAoCM,UAApC,EAAgDL,aAAhD,EAA+DC,0BAA/D,CAAd;;AAEA,QAAIG,OAAO,KAAKH,0BAAhB,EAA4C;AACxCE,MAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACH;AACJ,GANQ,EAMN,CAAEC,OAAF,CANM,CAAT;AAQA,SACI;AAAS,IAAA,SAAS,EAAC,uBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAS,IAAA,SAAS,EAAC,+BAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAG,IAAA,SAAS,+CAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADJ,EAII;AAAG,IAAA,SAAS,EAAC,wDAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACQA,OADR,OAJJ,CADJ,EASI,oBAAC,IAAD;AAAM,IAAA,WAAW,EAAC,SAAlB;AAA4B,IAAA,WAAW,EAAC,GAAxC;AAA4C,IAAA,OAAO,EAAEA,OAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATJ,CADJ;AAaH,CAzBD;;AA2BA,eAAeF,mBAAf","sourcesContent":["import './animated-progress-bar.scss';\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Line } from 'rc-progress';\r\nimport { useGlobalState } from '../../global-state-provider';\r\nimport { increaseNumber } from '../../utils/func-utils';\r\n\r\nconst NUMBER_TO_INCREMENT_WITH = 1;\r\nconst TIMEOUT_IN_MS = 75;\r\nconst MAX_NUMBER_TO_INCREMENT_TO = 100;\r\n\r\nconst AnimatedProgressBar = () => {\r\n    const { setIsPageLoading } = useGlobalState();\r\n    const [ percent, setPercent ] = useState(0);\r\n\r\n    useEffect(() => {\r\n        increaseNumber(percent, NUMBER_TO_INCREMENT_WITH, setPercent, TIMEOUT_IN_MS, MAX_NUMBER_TO_INCREMENT_TO);\r\n\r\n        if (percent === MAX_NUMBER_TO_INCREMENT_TO) {\r\n            setIsPageLoading(false);\r\n        }\r\n    }, [ percent ]);\r\n\r\n    return (\r\n        <section className=\"animated-progress-bar\">\r\n            <article className=\"animated-progress-bar-content\">\r\n                <p className={`animated-progress-bar-turn-code-into-coffee`}>\r\n                    {`Turning coffee into code.`}\r\n                </p>\r\n                <p className=\"animated-progress-bar-turn-code-into-coffee-percentage\">\r\n                    {`${percent}%`}\r\n                </p>\r\n            </article>\r\n            <Line strokeColor=\"#19f6e8\" strokeWidth=\"1\" percent={percent} />\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default AnimatedProgressBar;\r\n"]},"metadata":{},"sourceType":"module"}