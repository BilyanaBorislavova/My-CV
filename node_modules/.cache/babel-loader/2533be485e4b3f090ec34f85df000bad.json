{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\User\\\\Desktop\\\\My-CV\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\My-CV\\\\src\\\\components\\\\animated\\\\animated-progress-bar.jsx\";\nimport './animated-progress-bar.scss';\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'rc-progress';\nimport { useGlobalState } from '../../global-state-provider';\nimport { increaseNumber } from '../../utils/func-utils';\nconst NUMBER_TO_INCREMENT_WITH = 1;\nconst TIMEOUT_IN_MS = 75;\nconst MAX_NUMBER_TO_INCREMENT_TO = 100;\nconst DEFAULT_STROKE_COLOR = '#19f6e8';\nconst DEFAULT_STROKE_WIDTH = '1';\n\nconst AnimatedProgressBar = ({\n  children,\n  numberToIncrementTo,\n  timeoutInMs = TIMEOUT_IN_MS,\n  strokeColor = DEFAULT_STROKE_COLOR,\n  strokeWidth = DEFAULT_STROKE_WIDTH,\n  shouldShowPercentage,\n  className = ''\n}) => {\n  const _useGlobalState = useGlobalState(),\n        setIsPageLoading = _useGlobalState.setIsPageLoading;\n\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        percent = _useState2[0],\n        setPercent = _useState2[1];\n\n  const maxNumberToIncrementTo = numberToIncrementTo ? numberToIncrementTo : MAX_NUMBER_TO_INCREMENT_TO;\n  useEffect(() => {\n    increaseNumber(percent, NUMBER_TO_INCREMENT_WITH, setPercent, timeoutInMs, maxNumberToIncrementTo);\n\n    if (percent === maxNumberToIncrementTo) {\n      setIsPageLoading(false);\n    }\n  }, [percent]);\n  const percentageText = shouldShowPercentage && React.createElement(\"p\", {\n    className: \"animated-progress-bar-content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"\".concat(percent, \"%\"));\n  return React.createElement(\"section\", {\n    className: \"animated-progress-bar \".concat(className),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"article\", {\n    className: \"animated-progress-bar-content-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, children, percentageText), React.createElement(Line, {\n    percent: percent,\n    strokeColor: strokeColor,\n    strokeWidth: strokeWidth,\n    trailWidth: strokeWidth,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }));\n};\n\nexport default AnimatedProgressBar;","map":{"version":3,"sources":["C:\\Users\\User\\Desktop\\My-CV\\src\\components\\animated\\animated-progress-bar.jsx"],"names":["React","useEffect","useState","Line","useGlobalState","increaseNumber","NUMBER_TO_INCREMENT_WITH","TIMEOUT_IN_MS","MAX_NUMBER_TO_INCREMENT_TO","DEFAULT_STROKE_COLOR","DEFAULT_STROKE_WIDTH","AnimatedProgressBar","children","numberToIncrementTo","timeoutInMs","strokeColor","strokeWidth","shouldShowPercentage","className","setIsPageLoading","percent","setPercent","maxNumberToIncrementTo","percentageText"],"mappings":";;AAAA,OAAO,8BAAP;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,aAArB;AACA,SAASC,cAAT,QAA+B,6BAA/B;AACA,SAASC,cAAT,QAA+B,wBAA/B;AAEA,MAAMC,wBAAwB,GAAG,CAAjC;AACA,MAAMC,aAAa,GAAG,EAAtB;AACA,MAAMC,0BAA0B,GAAG,GAAnC;AACA,MAAMC,oBAAoB,GAAG,SAA7B;AACA,MAAMC,oBAAoB,GAAG,GAA7B;;AAEA,MAAMC,mBAAmB,GAAG,CAAC;AACzBC,EAAAA,QADyB;AAEzBC,EAAAA,mBAFyB;AAGzBC,EAAAA,WAAW,GAAGP,aAHW;AAIzBQ,EAAAA,WAAW,GAAGN,oBAJW;AAKzBO,EAAAA,WAAW,GAAGN,oBALW;AAMzBO,EAAAA,oBANyB;AAOzBC,EAAAA,SAAS,GAAG;AAPa,CAAD,KAQtB;AAAA,0BAC2Bd,cAAc,EADzC;AAAA,QACMe,gBADN,mBACMA,gBADN;;AAAA,oBAE8BjB,QAAQ,CAAC,CAAD,CAFtC;AAAA;AAAA,QAEMkB,OAFN;AAAA,QAEeC,UAFf;;AAIF,QAAMC,sBAAsB,GAAGT,mBAAmB,GAC5CA,mBAD4C,GAE5CL,0BAFN;AAIAP,EAAAA,SAAS,CAAC,MAAM;AACZI,IAAAA,cAAc,CAACe,OAAD,EAAUd,wBAAV,EAAoCe,UAApC,EAAgDP,WAAhD,EAA6DQ,sBAA7D,CAAd;;AAEA,QAAIF,OAAO,KAAKE,sBAAhB,EAAwC;AACpCH,MAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACH;AACJ,GANQ,EAMN,CAAEC,OAAF,CANM,CAAT;AAQA,QAAMG,cAAc,GAChBN,oBAAoB,IAAI;AAAG,IAAA,SAAS,EAAC,+BAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAChBG,OADgB,OAD5B;AAMA,SACI;AAAS,IAAA,SAAS,kCAA2BF,SAA3B,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAS,IAAA,SAAS,EAAC,uCAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKN,QADL,EAEKW,cAFL,CADJ,EAKI,oBAAC,IAAD;AACE,IAAA,OAAO,EAAEH,OADX;AAEE,IAAA,WAAW,EAAEL,WAFf;AAGE,IAAA,WAAW,EAAEC,WAHf;AAIE,IAAA,UAAU,EAAEA,WAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,CADJ;AAcH,CA5CD;;AA8CA,eAAeL,mBAAf","sourcesContent":["import './animated-progress-bar.scss';\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Line } from 'rc-progress';\r\nimport { useGlobalState } from '../../global-state-provider';\r\nimport { increaseNumber } from '../../utils/func-utils';\r\n\r\nconst NUMBER_TO_INCREMENT_WITH = 1;\r\nconst TIMEOUT_IN_MS = 75;\r\nconst MAX_NUMBER_TO_INCREMENT_TO = 100;\r\nconst DEFAULT_STROKE_COLOR = '#19f6e8';\r\nconst DEFAULT_STROKE_WIDTH = '1';\r\n\r\nconst AnimatedProgressBar = ({\r\n    children,\r\n    numberToIncrementTo,\r\n    timeoutInMs = TIMEOUT_IN_MS,\r\n    strokeColor = DEFAULT_STROKE_COLOR,\r\n    strokeWidth = DEFAULT_STROKE_WIDTH,\r\n    shouldShowPercentage,\r\n    className = '',\r\n}) => {\r\n    const { setIsPageLoading } = useGlobalState();\r\n    const [ percent, setPercent ] = useState(0);\r\n\r\n    const maxNumberToIncrementTo = numberToIncrementTo\r\n        ? numberToIncrementTo\r\n        : MAX_NUMBER_TO_INCREMENT_TO;\r\n\r\n    useEffect(() => {\r\n        increaseNumber(percent, NUMBER_TO_INCREMENT_WITH, setPercent, timeoutInMs, maxNumberToIncrementTo);\r\n\r\n        if (percent === maxNumberToIncrementTo) {\r\n            setIsPageLoading(false);\r\n        }\r\n    }, [ percent ]);\r\n\r\n    const percentageText = (\r\n        shouldShowPercentage && <p className=\"animated-progress-bar-content\">\r\n            {`${percent}%`}\r\n        </p>\r\n    );\r\n\r\n    return (\r\n        <section className={`animated-progress-bar ${className}`}>\r\n            <article className=\"animated-progress-bar-content-wrapper\">\r\n                {children}\r\n                {percentageText}\r\n            </article>\r\n            <Line\r\n              percent={percent}\r\n              strokeColor={strokeColor}\r\n              strokeWidth={strokeWidth}\r\n              trailWidth={strokeWidth}\r\n            />\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default AnimatedProgressBar;\r\n"]},"metadata":{},"sourceType":"module"}