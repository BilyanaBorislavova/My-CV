{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\User\\\\Desktop\\\\My-CV\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\My-CV\\\\src\\\\page-content-wrapper.jsx\";\nimport React from 'react';\nimport LoadingIndicator from './components/loading-indicators/loading-indicator';\nconst isLoadingClassName = 'is-loading-page';\nconst cvContentWrapperClassName = 'cv-content-wrapper';\n\nconst PageContentWrapper = () => {\n  const _useState = useState(isLoadingClassName),\n        _useState2 = _slicedToArray(_useState, 2),\n        pageContentWrapperClassName = _useState2[0],\n        setPageContentWrapperClassName = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isLoading = _useState4[0],\n        setIsLoading = _useState4[1];\n\n  useEffect(() => {\n    setTimeout(() => {\n      setIsLoading(false);\n    }, 3000);\n  }, []);\n  useEffect(() => {\n    if (!isLoading) {\n      setPageContentWrapperClassName(cvContentWrapperClassName);\n    }\n  }, [isLoading]);\n  return React.createElement(\"body\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(LoadingIndicator, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }));\n};\n\nexport default PageContentWrapper;","map":{"version":3,"sources":["C:\\Users\\User\\Desktop\\My-CV\\src\\page-content-wrapper.jsx"],"names":["React","LoadingIndicator","isLoadingClassName","cvContentWrapperClassName","PageContentWrapper","useState","pageContentWrapperClassName","setPageContentWrapperClassName","isLoading","setIsLoading","useEffect","setTimeout"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,gBAAP,MAA6B,mDAA7B;AAEA,MAAMC,kBAAkB,GAAG,iBAA3B;AACA,MAAMC,yBAAyB,GAAG,oBAAlC;;AAEA,MAAMC,kBAAkB,GAAG,MAAM;AAAA,oBAC2CC,QAAQ,CAACH,kBAAD,CADnD;AAAA;AAAA,QACrBI,2BADqB;AAAA,QACQC,8BADR;;AAAA,qBAEOF,QAAQ,CAAC,IAAD,CAFf;AAAA;AAAA,QAErBG,SAFqB;AAAA,QAEVC,YAFU;;AAI7BC,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,UAAU,CAAC,MAAM;AACfF,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAFS,EAEP,IAFO,CAAV;AAGD,GAJQ,EAIN,EAJM,CAAT;AAMAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACF,SAAL,EAAgB;AACdD,MAAAA,8BAA8B,CAACJ,yBAAD,CAA9B;AACD;AACF,GAJQ,EAIN,CAAEK,SAAF,CAJM,CAAT;AAOA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAKH,CAtBD;;AAwBA,eAAeJ,kBAAf","sourcesContent":["import React from 'react';\r\nimport LoadingIndicator from './components/loading-indicators/loading-indicator';\r\n\r\nconst isLoadingClassName = 'is-loading-page';\r\nconst cvContentWrapperClassName = 'cv-content-wrapper';\r\n\r\nconst PageContentWrapper = () => {\r\n    const [ pageContentWrapperClassName, setPageContentWrapperClassName ] = useState(isLoadingClassName);\r\n    const [ isLoading, setIsLoading ] = useState(true);\r\n  \r\n    useEffect(() => {\r\n      setTimeout(() => {\r\n        setIsLoading(false);\r\n      }, 3000);\r\n    }, []);\r\n  \r\n    useEffect(() => {\r\n      if (!isLoading) {\r\n        setPageContentWrapperClassName(cvContentWrapperClassName);\r\n      }\r\n    }, [ isLoading ]);\r\n  \r\n    \r\n    return (\r\n        <body>\r\n            <LoadingIndicator />\r\n        </body>\r\n    )\r\n};\r\n\r\nexport default PageContentWrapper;\r\n"]},"metadata":{},"sourceType":"module"}