{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\User\\\\Desktop\\\\My-CV\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\My-CV\\\\src\\\\App.js\";\nimport React, { useState, useEffect } from 'react';\nimport LoadingIndicator from './components/loading-indicators/loading-indicator';\nconst isLoadingClassName = 'is-loading-page';\nconst cvContentWrapperClassName = 'cv-content-wrapper';\n\nconst App = () => {\n  const _useState = useState(isLoadingClassName),\n        _useState2 = _slicedToArray(_useState, 2),\n        pageContentWrapperClassName = _useState2[0],\n        setPageContentWrapperClassName = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isLoading = _useState4[0],\n        setIsLoading = _useState4[1];\n\n  useEffect(() => {\n    setTimeout(() => {\n      setIsLoading(false);\n    }, 3000);\n  }, []);\n  useEffect(() => {\n    setPageContentWrapperClassName(cvContentWrapperClassName);\n  }, [isLoading]);\n  return React.createElement(\"body\", {\n    className: pageContentWrapperClassName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(LoadingIndicator, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\User\\Desktop\\My-CV\\src\\App.js"],"names":["React","useState","useEffect","LoadingIndicator","isLoadingClassName","cvContentWrapperClassName","App","pageContentWrapperClassName","setPageContentWrapperClassName","isLoading","setIsLoading","setTimeout"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,gBAAP,MAA6B,mDAA7B;AAEA,MAAMC,kBAAkB,GAAG,iBAA3B;AACA,MAAMC,yBAAyB,GAAG,oBAAlC;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA,oBACwDL,QAAQ,CAACG,kBAAD,CADhE;AAAA;AAAA,QACRG,2BADQ;AAAA,QACqBC,8BADrB;;AAAA,qBAEoBP,QAAQ,CAAC,IAAD,CAF5B;AAAA;AAAA,QAERQ,SAFQ;AAAA,QAEGC,YAFH;;AAIhBR,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,UAAU,CAAC,MAAM;AACfD,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAFS,EAEP,IAFO,CAAV;AAGD,GAJQ,EAIN,EAJM,CAAT;AAMAR,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,8BAA8B,CAACH,yBAAD,CAA9B;AACD,GAFQ,EAEN,CAAEI,SAAF,CAFM,CAAT;AAIA,SACE;AAAM,IAAA,SAAS,EAAEF,2BAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CAnBD;;AAqBA,eAAeD,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport LoadingIndicator from './components/loading-indicators/loading-indicator';\n\nconst isLoadingClassName = 'is-loading-page';\nconst cvContentWrapperClassName = 'cv-content-wrapper';\n\nconst App = () => {\n  const [ pageContentWrapperClassName, setPageContentWrapperClassName ] = useState(isLoadingClassName);\n  const [ isLoading, setIsLoading ] = useState(true);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setIsLoading(false);\n    }, 3000);\n  }, []);\n\n  useEffect(() => {\n    setPageContentWrapperClassName(cvContentWrapperClassName);\n  }, [ isLoading ]);\n\n  return (\n    <body className={pageContentWrapperClassName}>\n      <LoadingIndicator />\n    </body>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}