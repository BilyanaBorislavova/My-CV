{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\User\\\\Desktop\\\\My-CV\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\My-CV\\\\src\\\\components\\\\animated\\\\animated-progress-bar.jsx\";\nimport './animated-progress-bar.scss';\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'rc-progress';\n\nconst AnimatedProgressBar = () => {\n  const _useEffect = useEffect(),\n        _useEffect2 = _slicedToArray(_useEffect, 2),\n        animatedClassName = _useEffect2[0],\n        setAnimatedClassName = _useEffect2[1];\n\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        percent = _useState2[0],\n        setPercent = _useState2[1];\n\n  const increasePercent = () => {\n    const updatedPercent = percent + 1;\n    const timeout = setTimeout(() => setPercent(updatedPercent), 75);\n\n    if (updatedPercent > 100) {\n      return clearTimeout(timeout);\n    }\n  };\n\n  useEffect(() => {\n    increasePercent();\n\n    if (percent === 100) {\n      setAnimatedClassName('has-loaded');\n    }\n  }, [percent]);\n  return React.createElement(\"section\", {\n    className: \"animated-progress-bar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"article\", {\n    className: \"animated-progress-bar-content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"animated-progress-bar-turn-code-into-coffee \".concat(animatedClassName),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"Turning coffee into code.\"), React.createElement(\"p\", {\n    className: \"animated-progress-bar-turn-code-into-coffee-percentage\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"\".concat(percent, \"%\"))), React.createElement(Line, {\n    strokeWidth: \"1\",\n    percent: percent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }));\n};\n\nexport default AnimatedProgressBar;","map":{"version":3,"sources":["C:\\Users\\User\\Desktop\\My-CV\\src\\components\\animated\\animated-progress-bar.jsx"],"names":["React","useEffect","useState","Line","AnimatedProgressBar","animatedClassName","setAnimatedClassName","percent","setPercent","increasePercent","updatedPercent","timeout","setTimeout","clearTimeout"],"mappings":";;AAAA,OAAO,8BAAP;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,aAArB;;AAEA,MAAMC,mBAAmB,GAAG,MAAM;AAAA,qBACsBH,SAAS,EAD/B;AAAA;AAAA,QACtBI,iBADsB;AAAA,QACHC,oBADG;;AAAA,oBAEEJ,QAAQ,CAAC,CAAD,CAFV;AAAA;AAAA,QAEtBK,OAFsB;AAAA,QAEbC,UAFa;;AAI9B,QAAMC,eAAe,GAAG,MAAM;AAC1B,UAAMC,cAAc,GAAGH,OAAO,GAAG,CAAjC;AAEA,UAAMI,OAAO,GAAGC,UAAU,CACtB,MAAMJ,UAAU,CAACE,cAAD,CADM,EAEtB,EAFsB,CAA1B;;AAKA,QAAIA,cAAc,GAAG,GAArB,EAA0B;AACtB,aAAOG,YAAY,CAACF,OAAD,CAAnB;AACH;AACJ,GAXD;;AAaAV,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,eAAe;;AAEf,QAAIF,OAAO,KAAK,GAAhB,EAAqB;AACjBD,MAAAA,oBAAoB,CAAC,YAAD,CAApB;AACH;AACJ,GANQ,EAMN,CAAEC,OAAF,CANM,CAAT;AAQA,SACI;AAAS,IAAA,SAAS,EAAC,uBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAS,IAAA,SAAS,EAAC,+BAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAG,IAAA,SAAS,wDAAiDF,iBAAjD,CAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADJ,EAII;AAAG,IAAA,SAAS,EAAC,wDAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACQE,OADR,OAJJ,CADJ,EASI,oBAAC,IAAD;AAAM,IAAA,WAAW,EAAC,GAAlB;AAAsB,IAAA,OAAO,EAAEA,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATJ,CADJ;AAaH,CAtCD;;AAwCA,eAAeH,mBAAf","sourcesContent":["import './animated-progress-bar.scss';\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Line } from 'rc-progress';\r\n\r\nconst AnimatedProgressBar = () => {\r\n    const [ animatedClassName, setAnimatedClassName ] = useEffect();\r\n    const [ percent, setPercent ] = useState(0);\r\n\r\n    const increasePercent = () => {\r\n        const updatedPercent = percent + 1;\r\n\r\n        const timeout = setTimeout(\r\n            () => setPercent(updatedPercent),\r\n            75,\r\n        );\r\n    \r\n        if (updatedPercent > 100) {\r\n            return clearTimeout(timeout);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        increasePercent();\r\n\r\n        if (percent === 100) {\r\n            setAnimatedClassName('has-loaded');\r\n        }\r\n    }, [ percent ]);\r\n\r\n    return (\r\n        <section className=\"animated-progress-bar\">\r\n            <article className=\"animated-progress-bar-content\">\r\n                <p className={`animated-progress-bar-turn-code-into-coffee ${animatedClassName}`}>\r\n                    {`Turning coffee into code.`}\r\n                </p>\r\n                <p className=\"animated-progress-bar-turn-code-into-coffee-percentage\">\r\n                    {`${percent}%`}\r\n                </p>\r\n            </article>\r\n            <Line strokeWidth=\"1\" percent={percent} />\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default AnimatedProgressBar;\r\n"]},"metadata":{},"sourceType":"module"}