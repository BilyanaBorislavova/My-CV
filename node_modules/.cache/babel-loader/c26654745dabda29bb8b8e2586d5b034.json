{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\User\\\\Desktop\\\\My-CV\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\My-CV\\\\src\\\\App.js\";\nimport './app.scss';\nimport React, { useState, useEffect } from 'react';\nimport { GlobalStateProvider } from './global-state-provider';\nimport LoadingIndicator from './components/loading-indicators/loading-indicator';\nconst isLoadingClassName = 'is-loading-page';\nconst cvContentWrapperClassName = 'cv-content-wrapper';\n\nconst App = () => {\n  const _useState = useState(isLoadingClassName),\n        _useState2 = _slicedToArray(_useState, 2),\n        pageContentWrapperClassName = _useState2[0],\n        setPageContentWrapperClassName = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isLoading = _useState4[0],\n        setIsLoading = _useState4[1];\n\n  useEffect(() => {\n    setTimeout(() => {\n      setIsLoading(false);\n    }, 3000);\n  }, []);\n  useEffect(() => {\n    if (!isLoading) {\n      setPageContentWrapperClassName(cvContentWrapperClassName);\n    }\n  }, [isLoading]);\n  return React.createElement(GlobalStateProvider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(\"body\", {\n    className: pageContentWrapperClassName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(LoadingIndicator, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\User\\Desktop\\My-CV\\src\\App.js"],"names":["React","useState","useEffect","GlobalStateProvider","LoadingIndicator","isLoadingClassName","cvContentWrapperClassName","App","pageContentWrapperClassName","setPageContentWrapperClassName","isLoading","setIsLoading","setTimeout"],"mappings":";;AAAA,OAAO,YAAP;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,mBAAT,QAAoC,yBAApC;AACA,OAAOC,gBAAP,MAA6B,mDAA7B;AAEA,MAAMC,kBAAkB,GAAG,iBAA3B;AACA,MAAMC,yBAAyB,GAAG,oBAAlC;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA,oBACwDN,QAAQ,CAACI,kBAAD,CADhE;AAAA;AAAA,QACRG,2BADQ;AAAA,QACqBC,8BADrB;;AAAA,qBAEoBR,QAAQ,CAAC,IAAD,CAF5B;AAAA;AAAA,QAERS,SAFQ;AAAA,QAEGC,YAFH;;AAIhBT,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,UAAU,CAAC,MAAM;AACfD,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAFS,EAEP,IAFO,CAAV;AAGD,GAJQ,EAIN,EAJM,CAAT;AAMAT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACQ,SAAL,EAAgB;AACdD,MAAAA,8BAA8B,CAACH,yBAAD,CAA9B;AACD;AACF,GAJQ,EAIN,CAAEI,SAAF,CAJM,CAAT;AAMA,SACE,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,SAAS,EAAEF,2BAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF;AAOD,CAvBD;;AAyBA,eAAeD,GAAf","sourcesContent":["import './app.scss';\n\nimport React, { useState, useEffect } from 'react';\nimport { GlobalStateProvider } from './global-state-provider';\nimport LoadingIndicator from './components/loading-indicators/loading-indicator';\n\nconst isLoadingClassName = 'is-loading-page';\nconst cvContentWrapperClassName = 'cv-content-wrapper';\n\nconst App = () => {\n  const [ pageContentWrapperClassName, setPageContentWrapperClassName ] = useState(isLoadingClassName);\n  const [ isLoading, setIsLoading ] = useState(true);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setIsLoading(false);\n    }, 3000);\n  }, []);\n\n  useEffect(() => {\n    if (!isLoading) {\n      setPageContentWrapperClassName(cvContentWrapperClassName);\n    }\n  }, [ isLoading ]);\n\n  return (\n    <GlobalStateProvider>      \n      <body className={pageContentWrapperClassName}>\n        <LoadingIndicator />\n      </body>\n    </GlobalStateProvider>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}